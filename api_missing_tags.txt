This file contains api tag missing in the project with the explanations for each case.
See https://github.com/ZettaScaleLabs/zenoh-tests/tree/tagging/api_matrix for details.

tags{api.attachment.is_empty(issues/268)}
tags{api.attachment.len(issues/268)}
Add methods len and is_empty to z_owned_bytes_map_t and to z_attachment_t itself

tags{api.buffer.slices(pull/251)}
To be implemented - latest PR by Pierre

tags{api.publisher.delete.attachment.set(https://github.com/eclipse-zenoh/zenoh/issues/803)}
tags{api.publisher.delete.encoding.set(https://github.com/eclipse-zenoh/zenoh/issues/803)}
Purposedly not added: in Rust they exists only because DeleteBuilder is an alias 
for PutBuilder, but actually they are not used for delete operations.

tags{api.options.locality(See also)}
tags{api.request.allowed_destination.set(UNSTABLE)}
tags{api.publisher.allowed_destination.set(UNSTABLE)}
tags{api.queryable.allowed_origin.set(UNSTABLE)}
tags{api.subscriber.allowed_origin.set(UNSTABLE)}
tags{api.publisher.put.allowed_destination.set(UNSTABLE)}
tags{api.publisher.delete.allowed_destination.set(UNSTABLE)}
Also check, do we need separate option structures for session.put and publisher.put ?
If rust API doesn't allow to change publisher.put options on fly, this is correct.
It's unstable, to be decided do we need to add it to zenoh-c now

tags{api.request.accept_replies.set(UNSTABLE)}
tags{api.query.accepts_replies.get(UNSTABLE)}
Also unsatble. To be decided.

tags{api.ke_tree(issue/273)}
tags{api.ke_tree.create(issue/273)}
tags{api.ke_tree.create.with_token(issue/273)}
To be implemented in zenoh-c?

tags{api.keyexpr.create.autocanonize(issues/267)}
Implement in zenoh-c, it exists in zenoh-pico

tags{api.keyexpr.get_nonwild_prefix(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.keyexpr.is_wild(https://github.com/eclipse-zenoh/zenoh/issues/806)}
Actually internal for zenoh, specify this in documentation, remove tags

tags{api.keyexpr.iter(N/A)}
Could be useful, but it's not an essential part of the API.
Actually internal, mark it as it, remove tag

tags{api.keyexpr.relation_to(issues/269)}
tags{api.options.keyexpr.set_intersection_level(issues/269)}
tags{api.options.keyexpr.set_intersection_level.disjoint(issues/269)}
tags{api.options.keyexpr.set_intersection_level.equals(issues/269)}
tags{api.options.keyexpr.set_intersection_level.includes(issues/269)}
tags{api.options.keyexpr.set_intersection_level.intersects(issues/269)}
SetIntersectionLevel is the return value of the relation_to function
Add to zenoh-c

tags{api.keyexpr.strip_prefix(https://github.com/eclipse-zenoh/zenoh/issues/806)}
Mark as internal, for plugins mostly

tags{api.liveliness.request.timeout.set(issues/274)}
Add option to zenoh-c

tags{api.liveliness.request.channel(N/A)}
Same channel as the query channel, it's avaialable actually

tags{api.scout.channel(N/A)}
May be not worth to add, but possible

tags{api.matching.listener.channel(N/A)}
No support for channel in zenoh-c - same cloning issue as in subscriber

tags{api.liveliness.subscriber.channel(N/A)}
tags{api.subscriber.channel(N/A)}
No support for subscriber channel in zenoh-c yet - no sample clone. Will be
added soon, need to consider adding subscriber channels

Should the channel functionality in zenoh-c (channel for queryable and channel for 'get' request)
be extended to use for all cases above?

tags{api.matching.listener.undeclare(N/A)}
Not needed in zenoh-c, it's used for async only - undeclare can work asynchronously

tags{api.config.create.from_env(issues/270)}
Need to be implemented in zenoh-c

tags{api.config.entry.adminspace.permissions.read(issues/270)}
tags{api.config.entry.adminspace.permissions.write(issues/270)}
tags{api.config.entry.aggregation.publishers(issues/270)}
tags{api.config.entry.aggregation.subscribers(issues/270)}
tags{api.config.entry.downsampling(issues/270)}
tags{api.config.entry.id(issues/270)}
tags{api.config.entry.metadata(issues/270)}
tags{api.config.entry.plugins(issues/270)}
tags{api.config.entry.plugins_search_dirs(issues/270)}
tags{api.config.entry.queries_default_timeout(issues/270)}
tags{api.config.entry.routing.peer.mode(issues/270)}
tags{api.config.entry.routing.router.peers_failover_brokering(issues/270)}
tags{api.config.entry.scouting.gossip.autoconnect(issues/270)}
tags{api.config.entry.scouting.gossip.enabled(issues/270)}
tags{api.config.entry.scouting.multicast.autoconnect(issues/270)}
tags{api.config.entry.scouting.multicast.listen(issues/270)}
tags{api.config.entry.scouting.timeout(issues/270)}
tags{api.config.entry.timestamping(issues/270)}
tags{api.config.entry.timestamping.drop_future_timestamp(issues/270)}
tags{api.config.entry.transport.auth.pubkey.algorithm(issues/270)}
tags{api.config.entry.transport.auth.pubkey.key_size(issues/270)}
tags{api.config.entry.transport.auth.pubkey.private_key_file(issues/270)}
tags{api.config.entry.transport.auth.pubkey.private_key_pem(issues/270)}
tags{api.config.entry.transport.auth.pubkey.public_key_file(issues/270)}
tags{api.config.entry.transport.auth.pubkey.public_key_pem(issues/270)}
tags{api.config.entry.transport.auth.usrpwd.dictionary_file(issues/270)}
tags{api.config.entry.transport.link.protocols(issues/270)}
tags{api.config.entry.transport.link.rx(issues/270)}
tags{api.config.entry.transport.link.rx.buffer_size(issues/270)}
tags{api.config.entry.transport.link.rx.defragmentation_buffer_size(issues/270)}
tags{api.config.entry.transport.link.tls.client_auth(issues/270)}
tags{api.config.entry.transport.link.tls.client_certificate(issues/270)}
tags{api.config.entry.transport.link.tls.client_certificate_base64(issues/270)}
tags{api.config.entry.transport.link.tls.client_private_key(issues/270)}
tags{api.config.entry.transport.link.tls.client_private_key_base64(issues/270)}
tags{api.config.entry.transport.link.tls.root_ca_certificate(issues/270)}
tags{api.config.entry.transport.link.tls.root_ca_certificate_base64(issues/270)}
tags{api.config.entry.transport.link.tls.server_certificate(issues/270)}
tags{api.config.entry.transport.link.tls.server_certificate_base64(issues/270)}
tags{api.config.entry.transport.link.tls.server_name_verification(issues/270)}
tags{api.config.entry.transport.link.tls.server_private_key(issues/270)}
tags{api.config.entry.transport.link.tls.server_private_key_base64(issues/270)}
tags{api.config.entry.transport.link.tx.keep_alive(issues/270)}
tags{api.config.entry.transport.link.tx.lease(issues/270)}
tags{api.config.entry.transport.link.tx.mtu(issues/270)}
tags{api.config.entry.transport.link.tx.queue.backoff(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.background(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.control(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.data(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.data_high(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.data_low(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.interactive_high(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.interactive_low(issues/270)}
tags{api.config.entry.transport.link.tx.queue.size.real_time(issues/270)}
tags{api.config.entry.transport.link.tx.sequence_number_resolution(issues/270)}
tags{api.config.entry.transport.link.tx.threads(issues/270)}
tags{api.config.entry.transport.link.unixpipe.path(issues/270)}
tags{api.config.entry.transport.multicast.compression.enabled(issues/270)}
tags{api.config.entry.transport.multicast.join_interval(issues/270)}
tags{api.config.entry.transport.multicast.max_sessions(issues/270)}
tags{api.config.entry.transport.multicast.qos.enabled(issues/270)}
tags{api.config.entry.transport.shared_memory.enabled(issues/270)}
tags{api.config.entry.transport.unicast.accept_pending(issues/270)}
tags{api.config.entry.transport.unicast.compression(issues/270)}
tags{api.config.entry.transport.unicast.compression.enabled(issues/270)}
tags{api.config.entry.transport.unicast.lowlatency(issues/270)}
tags{api.config.entry.transport.unicast.max_links(issues/270)}
tags{api.config.entry.transport.unicast.max_sessions(issues/270)}
tags{api.config.entry.transport.unicast.open_timeout(issues/270)}
tags{api.config.entry.transport.unicast.qos(issues/270)}
tags{api.config.entry.transport.unicast.qos.enabled(issues/270)}
Review these tags: they are configuration too:
tags{api.downsampling_item_conf(issues/270)}
tags{api.downsampling_rule_conf(issues/270)}

Discuss it: this is useful for convenient work with both pico and zenoh-c, but they
have different value format anyway

tags{api.options.downsampling_flow(issues/270)}
tags{api.options.downsampling_flow.egress(issues/270)}
tags{api.options.downsampling_flow.ingress(issues/270)}
Used in config only, need to be added if corresponding config option is added.

tags{api.options.priority.max(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.options.priority.min(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.options.priority.num(https://github.com/eclipse-zenoh/zenoh/issues/806)}
Internal ones, to be checked if it's really the case

tags{api.options.query_target.complete(https://github.com/eclipse-zenoh/zenoh/issues/807)}
To be discussed: was purposedly not exposed to zenoh-c, feature is not actually supported

tags{api.sample.source_info.get(issues/259)}
tags{api.sample.source_info.set(issues/259)}
tags{api.options.source_info(issues/259)}
tags{api.options.source_info.source_id(issues/259)}
tags{api.options.source_info.source_sn(issues/259)}
Unstable

tags{api.options.what_am_i.to_str(issues/271)}
Consider exposing - examples reimplements it all the time

tags{api.publisher.send_matching_status_request(UNSTABLE)}
To be added to zenoh-c

tags{api.reply.replier_id.get(issues/278)}
Expose to zenoh-c, after reply rework

tags{api.sample.timestamp.ensure(issues/275)}
Find a way to expose: it takes mutable sample, which doesn't work for zenoh-c

tags{api.scout.stop(N/A)}
No sense for zenoh-c - scout function blocks the thread

tags(api.query.selector.get(N/A))
tags{api.selector(N/A)}
tags{api.selector.create(N/A)}
tags{api.selector.keyexpr.get(N/A)}
tags{api.selector.keyexpr.set(N/A)}
tags{api.selector.parameters.get(N/A)}
tags{api.selector.parameters.set(N/A)}
tags{api.selector.time_range.get(N/A)}
tags{api.selector.time_range.remove(N/A)}
tags{api.selector.time_range.set(N/A)}
tags{api.options.selector.time_range_key(N/A)}
Selector exists in rust only for set of utiulity url functions. As they are
not exposed to zenoh-c, no need to have separate Selector structure

tags{api.session.config.set(issues/277)}
tags{api.session.config.get(issues/277)}
Think about adding config accessor method to the session

tags{api.timestamp.create.now(https://github.com/eclipse-zenoh/zenoh-c/issues/276)}

tags{api.session.hlc(N/A)}
HLC is Rust specific. But need to check why `new_reception_timestamp` (tags{api.timestamp.create.now(See also)}) do not use it

tags{api.what_am_i_matcher(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.what_am_i_matcher.create.client(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.what_am_i_matcher.create.empty(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.what_am_i_matcher.create.peer(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.what_am_i_matcher.create.router(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.what_am_i_matcher.is_empty(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.what_am_i_matcher.matches(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.what_am_i_matcher.to_str(https://github.com/eclipse-zenoh/zenoh/issues/806)}
Internal thing?

tags{api.zid.create.rand(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.zid.max_size(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.zid.size(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.zid.to_keyexpr(https://github.com/eclipse-zenoh/zenoh/issues/806)}
tags{api.zid.to_le_bytes(https://github.com/eclipse-zenoh/zenoh/issues/806)}
To be decided